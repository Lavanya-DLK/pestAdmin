{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DLK\\\\Lavanya\\\\Projects\\\\Sample Projects\\\\berry-free-react-admin-template\\\\create-react-app\\\\src\\\\views\\\\dashboard\\\\Default\\\\TotalGrowthBarChart.js\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n// import { Grid, MenuItem, TextField, Typography } from '@mui/material';\n\n// third-party\nimport ApexCharts from 'apexcharts';\n// import Chart from 'react-apexcharts';\n\n// project imports\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\n// import { gridSpacing } from 'store/constant';\n\n// chart data\nimport chartData from './chart-data/total-growth-bar-chart';\n\n// const status = [\n//   {\n//     value: 'today',\n//     label: 'Today'\n//   },\n//   {\n//     value: 'month',\n//     label: 'This Month'\n//   },\n//   {\n//     value: 'year',\n//     label: 'This Year'\n//   }\n// ];\n\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TotalGrowthBarChart = _ref => {\n  _s();\n  let {\n    isLoading\n  } = _ref;\n  // const [value, setValue] = useState('today');\n  const theme = useTheme();\n  const customization = useSelector(state => state.customization);\n  const {\n    navType\n  } = customization;\n  const {\n    primary\n  } = theme.palette.text;\n  const darkLight = theme.palette.dark.light;\n  const grey200 = theme.palette.grey[200];\n  const grey500 = theme.palette.grey[500];\n  const primary200 = theme.palette.primary[200];\n  const primaryDark = theme.palette.primary.dark;\n  const secondaryMain = theme.palette.secondary.main;\n  const secondaryLight = theme.palette.secondary.light;\n  useEffect(() => {\n    const newChartData = {\n      ...chartData.options,\n      colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: grey200\n      },\n      tooltip: {\n        theme: 'light'\n      },\n      legend: {\n        labels: {\n          colors: grey500\n        }\n      }\n    };\n\n    // do not load chart when loading\n    if (!isLoading) {\n      ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n    }\n  }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(SkeletonTotalGrowthBarChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MainCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(TotalGrowthBarChart, \"t0T4qBKA3HYGj6M/G41+ZTuRoxk=\", false, function () {\n  return [useTheme, useSelector];\n});\n_c = TotalGrowthBarChart;\nTotalGrowthBarChart.propTypes = {\n  isLoading: PropTypes.bool\n};\nexport default TotalGrowthBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalGrowthBarChart\");","map":{"version":3,"names":["PropTypes","useEffect","useSelector","useTheme","ApexCharts","SkeletonTotalGrowthBarChart","MainCard","chartData","jsxDEV","_jsxDEV","Fragment","_Fragment","TotalGrowthBarChart","_ref","_s","isLoading","theme","customization","state","navType","primary","palette","text","darkLight","dark","light","grey200","grey","grey500","primary200","primaryDark","secondaryMain","secondary","main","secondaryLight","newChartData","options","colors","xaxis","labels","style","yaxis","grid","borderColor","tooltip","legend","exec","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","$RefreshReg$"],"sources":["C:/Users/DLK/Lavanya/Projects/Sample Projects/berry-free-react-admin-template/create-react-app/src/views/dashboard/Default/TotalGrowthBarChart.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport {useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n// import { Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport ApexCharts from 'apexcharts';\r\n// import Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n// import { gridSpacing } from 'store/constant';\r\n\r\n// chart data\r\nimport chartData from './chart-data/total-growth-bar-chart';\r\n\r\n// const status = [\r\n//   {\r\n//     value: 'today',\r\n//     label: 'Today'\r\n//   },\r\n//   {\r\n//     value: 'month',\r\n//     label: 'This Month'\r\n//   },\r\n//   {\r\n//     value: 'year',\r\n//     label: 'This Year'\r\n//   }\r\n// ];\r\n\r\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst TotalGrowthBarChart = ({ isLoading }) => {\r\n  // const [value, setValue] = useState('today');\r\n  const theme = useTheme();\r\n  const customization = useSelector((state) => state.customization);\r\n\r\n  const { navType } = customization;\r\n  const { primary } = theme.palette.text;\r\n  const darkLight = theme.palette.dark.light;\r\n  const grey200 = theme.palette.grey[200];\r\n  const grey500 = theme.palette.grey[500];\r\n\r\n  const primary200 = theme.palette.primary[200];\r\n  const primaryDark = theme.palette.primary.dark;\r\n  const secondaryMain = theme.palette.secondary.main;\r\n  const secondaryLight = theme.palette.secondary.light;\r\n\r\n  useEffect(() => {\r\n    const newChartData = {\r\n      ...chartData.options,\r\n      colors: [primary200, primaryDark, secondaryMain, secondaryLight],\r\n      xaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\r\n          }\r\n        }\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: [primary]\r\n          }\r\n        }\r\n      },\r\n      grid: {\r\n        borderColor: grey200\r\n      },\r\n      tooltip: {\r\n        theme: 'light'\r\n      },\r\n      legend: {\r\n        labels: {\r\n          colors: grey500\r\n        }\r\n      }\r\n    };\r\n\r\n    // do not load chart when loading\r\n    if (!isLoading) {\r\n      ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\r\n    }\r\n  }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <SkeletonTotalGrowthBarChart />\r\n      ) : (\r\n        <MainCard>\r\n          {/* <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n              <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Grid item>\r\n                  <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid item>\r\n                      <Typography variant=\"subtitle2\">Total Growth</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h3\">$2,324.00</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField id=\"standard-select-currency\" select value={value} onChange={(e) => setValue(e.target.value)}>\r\n                    {status.map((option) => (\r\n                      <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Chart {...chartData} />\r\n            </Grid>\r\n          </Grid> */}\r\n        </MainCard>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nTotalGrowthBarChart.propTypes = {\r\n  isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalGrowthBarChart;\r\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAAQC,SAAS,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C;;AAEA;AACA,OAAOC,UAAU,MAAM,YAAY;AACnC;;AAEA;AACA,OAAOC,2BAA2B,MAAM,iDAAiD;AACzF,OAAOC,QAAQ,MAAM,6BAA6B;AAClD;;AAEA;AACA,OAAOC,SAAS,MAAM,qCAAqC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,mBAAmB,GAAGC,IAAA,IAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC;EAAU,CAAC,GAAAF,IAAA;EACxC;EACA,MAAMG,KAAK,GAAGb,QAAQ,CAAC,CAAC;EACxB,MAAMc,aAAa,GAAGf,WAAW,CAAEgB,KAAK,IAAKA,KAAK,CAACD,aAAa,CAAC;EAEjE,MAAM;IAAEE;EAAQ,CAAC,GAAGF,aAAa;EACjC,MAAM;IAAEG;EAAQ,CAAC,GAAGJ,KAAK,CAACK,OAAO,CAACC,IAAI;EACtC,MAAMC,SAAS,GAAGP,KAAK,CAACK,OAAO,CAACG,IAAI,CAACC,KAAK;EAC1C,MAAMC,OAAO,GAAGV,KAAK,CAACK,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC;EACvC,MAAMC,OAAO,GAAGZ,KAAK,CAACK,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC;EAEvC,MAAME,UAAU,GAAGb,KAAK,CAACK,OAAO,CAACD,OAAO,CAAC,GAAG,CAAC;EAC7C,MAAMU,WAAW,GAAGd,KAAK,CAACK,OAAO,CAACD,OAAO,CAACI,IAAI;EAC9C,MAAMO,aAAa,GAAGf,KAAK,CAACK,OAAO,CAACW,SAAS,CAACC,IAAI;EAClD,MAAMC,cAAc,GAAGlB,KAAK,CAACK,OAAO,CAACW,SAAS,CAACP,KAAK;EAEpDxB,SAAS,CAAC,MAAM;IACd,MAAMkC,YAAY,GAAG;MACnB,GAAG5B,SAAS,CAAC6B,OAAO;MACpBC,MAAM,EAAE,CAACR,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEG,cAAc,CAAC;MAChEI,KAAK,EAAE;QACLC,MAAM,EAAE;UACNC,KAAK,EAAE;YACLH,MAAM,EAAE,CAACjB,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO,EAAEA,OAAO;UACrH;QACF;MACF,CAAC;MACDqB,KAAK,EAAE;QACLF,MAAM,EAAE;UACNC,KAAK,EAAE;YACLH,MAAM,EAAE,CAACjB,OAAO;UAClB;QACF;MACF,CAAC;MACDsB,IAAI,EAAE;QACJC,WAAW,EAAEjB;MACf,CAAC;MACDkB,OAAO,EAAE;QACP5B,KAAK,EAAE;MACT,CAAC;MACD6B,MAAM,EAAE;QACNN,MAAM,EAAE;UACNF,MAAM,EAAET;QACV;MACF;IACF,CAAC;;IAED;IACA,IAAI,CAACb,SAAS,EAAE;MACdX,UAAU,CAAC0C,IAAI,CAAE,WAAU,EAAE,eAAe,EAAEX,YAAY,CAAC;IAC7D;EACF,CAAC,EAAE,CAAChB,OAAO,EAAEU,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEG,cAAc,EAAEd,OAAO,EAAEG,SAAS,EAAEG,OAAO,EAAEX,SAAS,EAAEa,OAAO,CAAC,CAAC;EAEtH,oBACEnB,OAAA,CAAAE,SAAA;IAAAoC,QAAA,EACGhC,SAAS,gBACRN,OAAA,CAACJ,2BAA2B;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE/B1C,OAAA,CAACH,QAAQ;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA6BC;EACX,gBACD,CAAC;AAEP,CAAC;AAACrC,EAAA,CA3FIF,mBAAmB;EAAA,QAETT,QAAQ,EACAD,WAAW;AAAA;AAAAkD,EAAA,GAH7BxC,mBAAmB;AA6FzBA,mBAAmB,CAACyC,SAAS,GAAG;EAC9BtC,SAAS,EAAEf,SAAS,CAACsD;AACvB,CAAC;AAED,eAAe1C,mBAAmB;AAAC,IAAAwC,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}